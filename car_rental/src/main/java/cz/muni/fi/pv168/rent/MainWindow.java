package cz.muni.fi.pv168.rent;

import cz.muni.fi.pv168.common.ServiceFailureException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.sql.SQLException;
import java.util.Calendar;
import cz.muni.fi.pv168.common.InternalIntegrityException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.AbstractTableModel;
import org.apache.tomcat.dbcp.dbcp2.BasicDataSource;
import org.slf4j.LoggerFactory;


public class MainWindow extends javax.swing.JFrame {

    public final static org.slf4j.Logger logger = 
            LoggerFactory.getLogger("cz.muni.fi.pv168.rent.Error");  
        
    ReservationManagerImpl manager;
    VehicleTableModel vehModel;
    CustomerTableModel custModel;
    ReservationTableModel resModel;
    
    public CustomerTableModel getCustomerTableModel() {
        return custModel;
    }
    
    private static DataSource prepareDataSource() throws SQLException {          
        BasicDataSource dataSource = new BasicDataSource();     
        dataSource.setUrl("jdbc:derby:memory:vehiclemgr-test;create=true");
        return dataSource;
    }
    
    public MainWindow(DataSource dataSource) {                               
                
        manager = new ReservationManagerImpl(dataSource);        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        textField1 = new java.awt.TextField();
        textField2 = new java.awt.TextField();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        textField3 = new java.awt.TextField();
        textField4 = new java.awt.TextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        textField5 = new java.awt.TextField();
        jComboBox1 = new javax.swing.JComboBox(Vehicle.Brand.values());
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        label9 = new java.awt.Label();
        label10 = new java.awt.Label();
        label11 = new java.awt.Label();
        label12 = new java.awt.Label();
        textField6 = new java.awt.TextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Strings"); // NOI18N
        setTitle(bundle.getString("RentService")); // NOI18N

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(700, 500));

        textField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField1ActionPerformed(evt);
            }
        });

        label1.setText(bundle.getString("Name")); // NOI18N

        label2.setText(bundle.getString("Address")); // NOI18N

        label3.setText(bundle.getString("Phone")); // NOI18N

        label4.setText(bundle.getString("Email")); // NOI18N

        textField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField3ActionPerformed(evt);
            }
        });

        jButton1.setText(bundle.getString("Add")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(bundle.getString("Edit")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText(bundle.getString("Delete")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        //CustomerTableModel model = new CustomerTableModel();
        custModel = new CustomerTableModel();
        jTable1.setModel(custModel);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textField1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(textField2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(label4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textField3, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(textField4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(166, 166, 166)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(label1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("Customer"), jPanel1); // NOI18N

        label5.setText(bundle.getString("Price")); // NOI18N

        label6.setText(bundle.getString("Brand")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(Vehicle.Brand.values()));

        vehModel = new VehicleTableModel();
        jTable2.setModel(vehModel);
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jButton4.setText(bundle.getString("Add")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText(bundle.getString("Edit")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText(bundle.getString("Delete")); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 440, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textField5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox1, 0, 130, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton5)
                        .addComponent(jButton6)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("Vehicle"), jPanel2); // NOI18N

        label7.setText(bundle.getString("Vehicle")); // NOI18N

        label8.setText(bundle.getString("Customer")); // NOI18N

        label9.setText(bundle.getString("StartDate")); // NOI18N

        label10.setText(bundle.getString("EndDate")); // NOI18N

        label11.setText(bundle.getString("RealEndDate")); // NOI18N

        label12.setText(bundle.getString("Info")); // NOI18N

        resModel = new ReservationTableModel();
        jTable3.setModel(resModel);
        jTable3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable3);

        jButton7.setText(bundle.getString("Add")); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText(bundle.getString("Edit")); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText(bundle.getString("Delete")); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jTable4.setModel(vehModel);
        jScrollPane6.setViewportView(jTable4);

        jTable5.setModel(custModel);
        jScrollPane7.setViewportView(jTable5);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(label10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(label11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(label9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(5, 5, 5)))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                    .addComponent(jDateChooser3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                                .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(textField6, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(textField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton7)
                                .addComponent(jButton8)
                                .addComponent(jButton9)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundle.getString("Reservation"), jPanel3); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName(bundle.getString("RentService")); // NOI18N
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        final int row = jTable1.getSelectedRow();
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    List<Customer> customers = custModel.getCustomers();
                    Long clicked = (Long) (jTable1.getModel().getValueAt(row, 0));
                    for (Customer customer : customers) {
                        if (customer.getId() == clicked) {
                            String name = textField1.getText();
                            String address = textField2.getText();
                            String phone = textField3.getText();
                            String email = textField4.getText();
                            customer.setName(name);
                            customer.setAddress(address);
                            customer.setPhone(phone);
                            customer.setEmail(email);
                            custModel.updateCustomer(customer, row);
                            break;
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null, custModel.bundle.getString("outOfBounds"), custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);

                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);

                } catch (ServiceFailureException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } finally {
                    custModel.customers = (ArrayList) manager.getCustomerManager().getAllCustomers();
                    custModel.fireTableRowsUpdated(row, row);
                    textField1.setText("");
                    textField2.setText("");
                    textField3.setText("");
                    textField4.setText("");
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void textField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String name = textField1.getText();
        String address = textField2.getText();
        String phone = textField3.getText();
        String email = textField4.getText();

        final Customer customer = newCustomer(name, address, phone, email);
        
        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                Boolean val = false;
                try {
                    custModel.addCustomer(customer);
                    val = true;
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                } catch (ServiceFailureException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } catch (InternalIntegrityException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                    logger.warn(e.getMessage());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } finally {
                    textField1.setText("");
                    textField2.setText("");
                    textField3.setText("");
                    textField4.setText("");
                }
                return val;
            }
            @Override
            protected void done() {
                Boolean val = null;
                try {
                    val = get();
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ExecutionException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        worker.execute();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        final int row = jTable1.getSelectedRow();
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    textField1.setText((String) jTable1.getValueAt(row, 1));
                    textField2.setText((String) jTable1.getValueAt(row, 2));
                    textField3.setText((String) jTable1.getValueAt(row, 3));
                    textField4.setText((String) jTable1.getValueAt(row, 4));
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        final int row = jTable1.getSelectedRow();
        
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    int row = jTable1.getSelectedRow();
                    Long clicked = (Long) (jTable1.getModel().getValueAt(row, 0));
                    for (Customer customer : custModel.getCustomers()) {
                        if (customer.getId() == clicked) {
                            custModel.deleteCustomer(customer, row);
                            break;
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null, custModel.bundle.getString("outOfBounds"), custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);

                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);

                } catch (InternalIntegrityException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Warning"), JOptionPane.WARNING_MESSAGE);

                } catch (ServiceFailureException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } finally {
                    textField1.setText("");
                    textField2.setText("");
                    textField3.setText("");
                    textField4.setText("");
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange

    }//GEN-LAST:event_jTable1PropertyChange

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                String strPrice = textField5.getText();
                Vehicle.Brand brand = (Vehicle.Brand) jComboBox1.getModel().getSelectedItem();

                BigDecimal price;
                try {
                    price = new BigDecimal(strPrice);
                    Vehicle vehicle = newVehicle(price, brand);
                    try {
                        vehModel.addVehicle(vehicle);
                    } catch (IllegalArgumentException e) {
                        JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);

                    } catch (ServiceFailureException e) {
                        JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                        logger.warn(e.getMessage());
                        System.exit(1);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                        logger.warn(e.getMessage());
                        System.exit(1);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, custModel.bundle.getString("NumberFormat"),
                            custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                    price = null;
                } finally {
                    textField5.setText("");
                }
                return null;
            }

        };
        worker.execute();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    int row = jTable2.getSelectedRow();
                    Long clicked = (Long) (jTable2.getModel().getValueAt(row, 0));
                    for (Vehicle vehicle : vehModel.getVehicles()) {
                        if (vehicle.getId() == clicked) {
                            vehModel.deleteVehicle(vehicle, row);
                            break;
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null, custModel.bundle.getString("outOfBounds"), custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);

                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);

                } catch (InternalIntegrityException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Warning"), JOptionPane.WARNING_MESSAGE);
                    logger.warn(e.getMessage());

                } catch (ServiceFailureException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                }
                return null;
            }
            
        };
        worker.execute();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {

                List<Vehicle> vehicles = vehModel.getVehicles();

                try {
                    int row = jTable2.getSelectedRow();
                    Long clicked = (Long) (jTable2.getModel().getValueAt(row, 0));
                    for (Vehicle vehicle : vehicles) {
                        if (vehicle.getId() == clicked) {
                            String strPrice = textField5.getText();
                            BigDecimal price = new BigDecimal(strPrice);
                            Vehicle.Brand brand = (Vehicle.Brand) jComboBox1.getModel().getSelectedItem();
                            vehicle.setPrice(price);
                            vehicle.setBrand(brand);
                            vehModel.updateVehicle(vehicle, row);
                            break;
                        }
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, custModel.bundle.getString("NumberFormat"),
                            custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null, custModel.bundle.getString("outOfBounds"), custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);

                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);

                } catch (ServiceFailureException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                }
                return null;
            }

        };
        worker.execute();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    int row = jTable2.getSelectedRow();
                    jComboBox1.getModel().setSelectedItem((Vehicle.Brand) jTable2.getValueAt(row, 1));
                    textField5.setText((String) jTable2.getValueAt(row, 2).toString());
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                List<Vehicle> vehicles = vehModel.getVehicles();
                List<Customer> customers = custModel.getCustomers();

                try {
                    int vehicleTableRow = jTable4.getSelectedRow();
                    Long vehicleId = (Long) (jTable4.getModel().getValueAt(vehicleTableRow, 0));
                    int customerTableRow = jTable5.getSelectedRow();
                    Long customerId = (Long) (jTable5.getModel().getValueAt(customerTableRow, 0));

                    Vehicle vehicle = null;
                    for (Vehicle veh : vehicles) {
                        if (veh.getId() == vehicleId) {
                            vehicle = veh;
                        }
                    }
                    Customer customer = null;
                    for (Customer cust : customers) {
                        if (cust.getId() == customerId) {
                            customer = cust;
                        }
                    }

                    Calendar startDate = jDateChooser1.getCalendar();
                    Calendar endDate = jDateChooser2.getCalendar();
                    Calendar realEndDate = jDateChooser3.getCalendar();
                    String info = textField6.getText();
                    Reservation reservation = newReservation(vehicle, customer, startDate, endDate, realEndDate, info);
                    resModel.addReservation(reservation);
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null, custModel.bundle.getString("outOfBounds"), custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                } catch (ServiceFailureException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } catch (InternalIntegrityException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                    logger.warn(e.getMessage());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } finally {
                    textField6.setText("");
                    jDateChooser1.setCalendar(null);
                    jDateChooser2.setCalendar(null);
                    jDateChooser3.setCalendar(null);
                }
                return null;
            }

        };
        worker.execute();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    int row = jTable3.getSelectedRow();

                    int vehRow = -1;
                    Long vehicleId = (Long) jTable3.getValueAt(row, 1);
                    for (int i = 0; i < vehModel.getRowCount(); i++) {
                        if (vehicleId == vehModel.getValueAt(i, 0)) {
                            vehRow = i;
                            break;
                        }
                    }
                    int custRow = -1;
                    Long customerId = (Long) jTable3.getValueAt(row, 2);
                    for (int i = 0; i < custModel.getRowCount(); i++) {
                        if (customerId == custModel.getValueAt(i, 0)) {
                            custRow = i;
                            break;
                        }
                    }

                    Calendar startDate = (Calendar) resModel.getCalendarValueAt(row, 3);
                    Calendar endDate = (Calendar) resModel.getCalendarValueAt(row, 4);
                    Calendar realEndDate = (Calendar) resModel.getCalendarValueAt(row, 5);
                    jDateChooser1.setCalendar(startDate);
                    jDateChooser2.setCalendar(endDate);
                    jDateChooser3.setCalendar(realEndDate);

                    if (vehRow == -1) {
                        throw new Exception("This should NOT happen! - No match found for vehicleId");
                    }
                    jTable4.setRowSelectionInterval(vehRow, vehRow);
                    if (custRow == -1) {
                        throw new Exception("This should NOT happen! - No match found for customerId");
                    }
                    jTable5.setRowSelectionInterval(custRow, custRow);
                    textField6.setText((String) jTable3.getValueAt(row, 6));
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                    //
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_jTable3MouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                List<Reservation> reservations = resModel.getReservations();
                int row = jTable3.getSelectedRow();

                try {
                    Long clicked = (Long) (jTable3.getModel().getValueAt(row, 0));
                    for (Reservation res : reservations) {
                        if (res.getId() == clicked) {
                            Vehicle vehicle = null;
                            Long vehId = (Long) jTable4.getValueAt(jTable4.getSelectedRow(), 0);
                            for (Vehicle veh : vehModel.getVehicles()) {
                                if (veh.getId() == vehId) {
                                    vehicle = veh;
                                }
                            }
                            res.setVehicle(vehicle);

                            Customer customer = null;
                            Long custId = (Long) jTable5.getValueAt(jTable5.getSelectedRow(), 0);
                            for (Customer cust : custModel.getCustomers()) {
                                if (cust.getId() == custId) {
                                    customer = cust;
                                }
                            }
                            res.setCustomer(customer);

                            res.setStartDate(jDateChooser1.getCalendar());
                            res.setEndDate(jDateChooser2.getCalendar());
                            res.setRealEndDate(jDateChooser3.getCalendar());
                            res.setInfo(textField6.getText());

                            resModel.updateReservation(res, row);
                            break;
                        }
                    }
                } catch (NullPointerException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                    //
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null, custModel.bundle.getString("outOfBounds"), custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                    //
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                    //
                } catch (ServiceFailureException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } finally {
                    resModel.reservations = (ArrayList) manager.getAllReservations();
                    resModel.fireTableRowsUpdated(row, row);
                    textField6.setText("");
                    jDateChooser1.setCalendar(null);
                    jDateChooser2.setCalendar(null);
                    jDateChooser3.setCalendar(null);
                }
                return null;
            }

        };
        worker.execute();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    int row = jTable3.getSelectedRow();
                    Long clicked = (Long) (jTable3.getModel().getValueAt(row, 0));
                    for (Reservation res : resModel.getReservations()) {
                        if (res.getId() == clicked) {
                            resModel.deleteReservation(res, row);
                            break;
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null, custModel.bundle.getString("outOfBounds"), custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                    //
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Plain"), JOptionPane.PLAIN_MESSAGE);
                    //
                } catch (InternalIntegrityException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Warning"), JOptionPane.WARNING_MESSAGE);
                    //
                } catch (ServiceFailureException e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e, custModel.bundle.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    logger.warn(e.getMessage());
                    System.exit(1);
                } finally {
                    textField6.setText("");
                    jDateChooser1.setCalendar(null);
                    jDateChooser2.setCalendar(null);
                    jDateChooser3.setCalendar(null);
                }
                return null;
            }

        };
        worker.execute();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void textField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textField3ActionPerformed


    public static void main(String args[]) {
                
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //Creates and initializes database
        final URL create = DBUtils.class.getResource("/createTables.sql");                              
        final URL drop   = DBUtils.class.getResource("/dropTables.sql");               
        final URL init   = DBUtils.class.getResource("/initTables.sql");                
        final DataSource dataSource = DBUtils.getDataSource("db.properties");                        
        
	//uncomment to run for the first time (if u dont have working DB)
        //DBUtils.executeSqlScript(dataSource, create); 
        //System.out.println("Tables created.");        
        
	//uncomment to run for the first time (if u dont have working DB)
        //DBUtils.executeSqlScript(dataSource, init);
        //System.out.println("Tables initialized.");                                                               
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow(dataSource).setVisible(true);
            }
        });        
        System.out.println("Gui running.");
        
	//uncomment to drop the working DB
        //DBUtils.executeSqlScript(dataSource, drop);                        
        //System.out.println("Tables dropoed.");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.TextField textField1;
    private java.awt.TextField textField2;
    private java.awt.TextField textField3;
    private java.awt.TextField textField4;
    private java.awt.TextField textField5;
    private java.awt.TextField textField6;
    // End of variables declaration//GEN-END:variables

    public class CustomerTableModel extends AbstractTableModel {
        
        private List<Customer> customers = (ArrayList)manager.getCustomerManager().getAllCustomers();
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Strings");

        public List<Customer> getCustomers() {
            return customers;
        }
        
        public void addCustomer(Customer customer) {
            if(manager.getCustomerManager() == null)
                throw new NullPointerException("this should NEVER happen = null customerManager"); //
            manager.getCustomerManager().createCustomer(customer);
            customers = (ArrayList)manager.getCustomerManager().getAllCustomers();
            fireTableRowsInserted(customers.size()-1, customers.size()-1);
        }
        
        public void deleteCustomer(Customer customer, int row) {
            if(manager.getCustomerManager() == null)
                throw new NullPointerException("this should NEVER happen = null customerManager"); //
            manager.getCustomerManager().deleteCustomer(customer);
            customers = (ArrayList)manager.getCustomerManager().getAllCustomers();
            fireTableRowsDeleted(row, row); 
        }
        
        public void updateCustomer(Customer customer, int row) {
            if(manager.getCustomerManager() == null)
                throw new NullPointerException("this should NEVER happen = null customerManager"); //
            manager.getCustomerManager().updateCustomer(customer); 
        }
        
        @Override
        public int getRowCount() {
            return customers.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if(rowIndex >= customers.size()) throw new IllegalArgumentException(bundle.getString("rowIndex"));
            if(columnIndex >= 5) throw new IllegalArgumentException(bundle.getString("columnIndex"));
            
            Customer customer = customers.get(rowIndex);
            
            switch(columnIndex){
                case 0: return customer.getId();
                case 1: return customer.getName();
                case 2: return customer.getAddress();
                case 3: return customer.getPhone();
                case 4: return customer.getEmail();
                default: throw new IllegalArgumentException(bundle.getString("columnIndex<0"));
            }
        }
        
        /*
         * 
         */
        @Override
        public void setValueAt(Object value, int rowIndex, int columnIndex){
            if(rowIndex >= customers.size()) throw new IllegalArgumentException(bundle.getString("rowIndex"));
            if(columnIndex >= 5) throw new IllegalArgumentException(bundle.getString("columnIndex"));
            if(value == null) throw new NullPointerException(bundle.getString("value"));
            
            Customer customer = customers.get(rowIndex);
            switch(columnIndex) {
                case 1: customer.setName((String) value);
                    break;
                case 2: customer.setAddress((String) value);
                    break;
                case 3: customer.setPhone((String) value);
                    break;
                case 4: customer.setEmail((String) value);
                    break;
                default: throw new IllegalArgumentException(bundle.getString("cannotSetValue"));
            }
        }
        
        @Override
        public boolean isCellEditable(int rowIdenx, int columnIndex) {
            return false;
        }
        
        @Override
        public String getColumnName(int columnIndex) {
        if(columnIndex >= 5) throw new IllegalArgumentException(bundle.getString("columnIndex"));
        
            switch(columnIndex) {
                case 0: return bundle.getString("Id");
                case 1: return bundle.getString("Name");
                case 2: return bundle.getString("Address");
                case 3: return bundle.getString("Phone");
                case 4: return bundle.getString("Email");
                default: throw new IllegalArgumentException(bundle.getString("columnIndex<0"));
            }
        }
    }
    
    private Customer newCustomer(String name, 
                                 String address, 
                                 String phone, 
                                 String email) {
        Customer customer = new Customer();        
        customer.setName(name);
        customer.setAddress(address);
        customer.setPhone(phone);
        customer.setEmail(email);        
        return customer;
    }

    
    private class VehicleTableModel extends AbstractTableModel {
        
        private List<Vehicle> vehicles = (ArrayList)manager.getVehicleManager().getAllVehicles();
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Strings");

        
        public List<Vehicle> getVehicles() {
            return vehicles;
        }
        
        public void addVehicle(Vehicle vehicle) {
            if(manager.getVehicleManager() == null)
                throw new NullPointerException("this should NEVER happen = null VehicleManager"); //
            manager.getVehicleManager().createVehicle(vehicle);
            vehicles = (ArrayList)manager.getVehicleManager().getAllVehicles();
            fireTableRowsInserted(vehicles.size()-1, vehicles.size()-1); 
        }
        
        public void deleteVehicle(Vehicle vehicle, int row) {
            if(manager.getVehicleManager()== null)
                throw new NullPointerException("this should NEVER happen = null VehicleManager"); //
            manager.getVehicleManager().deleteVehicle(vehicle);
            vehicles = (ArrayList)manager.getVehicleManager().getAllVehicles();
            fireTableRowsDeleted(row, row); 
        }
        
        
        public void updateVehicle(Vehicle vehicle, int row) {
            if(manager.getVehicleManager()== null)
                throw new NullPointerException("this should NEVER happen = null VehicleManager"); //
            manager.getVehicleManager().updateVehicle(vehicle);
            vehicles = (ArrayList)manager.getVehicleManager().getAllVehicles();
            fireTableRowsUpdated(row, row); 
        }
        
        @Override
        public int getRowCount() {
            return vehicles.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if(rowIndex >= vehicles.size()) throw new IllegalArgumentException(bundle.getString("rowIndex"));
            if(columnIndex >= 3) throw new IllegalArgumentException(bundle.getString("columnIndex"));
            
            Vehicle vehicle = vehicles.get(rowIndex);
            
            switch(columnIndex){
                case 0: return vehicle.getId();
                case 1: return vehicle.getBrand();
                case 2: return vehicle.getPrice();
                default: throw new IllegalArgumentException(bundle.getString("columnIndex<0"));
            }
        }
        
        
        @Override
        public void setValueAt(Object value, int rowIndex, int columnIndex){
            if(rowIndex >= vehicles.size()) throw new IllegalArgumentException(bundle.getString("rowIndex"));
            if(columnIndex >= 3) throw new IllegalArgumentException(bundle.getString("columnIndex"));
            if(value == null) throw new NullPointerException(bundle.getString("value"));
            
            Vehicle vehicle = vehicles.get(rowIndex);
            switch(columnIndex) {
                case 1: vehicle.setBrand((Vehicle.Brand) value);
                    break;
                case 2: vehicle.setPrice((BigDecimal) value);
                    break;
                default: throw new IllegalArgumentException(bundle.getString("cannotSetValue"));
            }
        }
        @Override
        public boolean isCellEditable(int rowIdenx, int columnIndex) {
            return false;
        }
        
        @Override
        public String getColumnName(int columnIndex) {
            if(columnIndex >= 3) throw new IllegalArgumentException(bundle.getString("columnIndex"));
            
            switch(columnIndex) {
                case 0: return bundle.getString("Id");
                case 1: return bundle.getString("Brand"); 
                case 2: return bundle.getString("Price"); 
                default: throw new IllegalArgumentException(bundle.getString("columnIndex<0"));
            }
        }
    }
    
    private static Vehicle newVehicle(BigDecimal price,Vehicle.Brand brand) {                            
        return new Vehicle(null, price, brand); 
    }

    
    private class ReservationTableModel extends AbstractTableModel {
        
        private List<Reservation> reservations = (ArrayList)manager.getAllReservations();
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Strings");
        
        public List<Reservation> getReservations() {
            return reservations;
        }
        
        public void addReservation(Reservation res) {
            manager.createReservation(res);
            reservations = (ArrayList)manager.getAllReservations();
            fireTableRowsInserted(reservations.size()-1, reservations.size()-1);
        }
        
        public void deleteReservation(Reservation res, int row) {
            manager.deleteReservation(res);
            reservations = (ArrayList)manager.getAllReservations();
            fireTableRowsDeleted(row, row);
        }
        
        public void updateReservation(Reservation res, int row) {
            manager.updateReservation(res);
        }
        
        @Override
        public int getRowCount() {
            return reservations.size();
        }

        @Override
        public int getColumnCount() {
            return 7;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if(rowIndex >= reservations.size()) throw new IllegalArgumentException(bundle.getString("rowIndex"));
            if(columnIndex >= 7) throw new IllegalArgumentException(bundle.getString("columnIndex"));
            
            Reservation res = reservations.get(rowIndex);
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

            switch(columnIndex){
                case 0: return res.getId();
                case 1: return res.getVehicle().getId();
                case 2: return res.getCustomer().getId();
                case 3: 
                    String strStartDate = null;
                    if (res.getStartDate() != null) {
                        strStartDate = sdf.format(res.getStartDate().getTime());
                    }
                    return strStartDate;
                case 4: 
                    String strEndDate = null;
                    if (res.getEndDate() != null) {
                        strEndDate = sdf.format(res.getEndDate().getTime());
                    }
                    return strEndDate;
                case 5:
                    String strRealEndDate = null;
                    if (res.getRealEndDate() != null) {
                        strRealEndDate = sdf.format(res.getRealEndDate().getTime());
                    }
                    return strRealEndDate;
                case 6: return res.getInfo();
                default: throw new IllegalArgumentException(bundle.getString("columnIndex<0"));
            }
        }
        
        public Object getCalendarValueAt(int rowIndex, int columnIndex) {
            if(rowIndex >= reservations.size()) throw new IllegalArgumentException(bundle.getString("rowIndex"));
            if(columnIndex >= 6) throw new IllegalArgumentException(bundle.getString("columnIndex"));
            
            Reservation res = reservations.get(rowIndex);

            switch(columnIndex){
                case 3: return res.getStartDate();
                case 4: return res.getEndDate();
                case 5:
                    if(res.getRealEndDate() != null)
                        return res.getRealEndDate();
                    else
                        return null;
                default: throw new IllegalArgumentException(bundle.getString("columnIndex<0"));
            }
        }
        
        @Override
        public void setValueAt(Object value, int rowIndex, int columnIndex){
            if(rowIndex >= reservations.size()) throw new IllegalArgumentException(bundle.getString("rowIndex"));
            if(columnIndex >= 7) throw new IllegalArgumentException(bundle.getString("columnIndex"));
            if(value == null) throw new NullPointerException(bundle.getString("value"));
            
            Reservation res = reservations.get(rowIndex);     
            switch(columnIndex) {
                case 3: res.setStartDate((Calendar) value);
                    break;
                case 4: res.setEndDate((Calendar) value);
                    break;
                case 5: res.setRealEndDate((Calendar) value);
                    break;
                case 6: res.setInfo((String) value);
                default: throw new IllegalArgumentException(bundle.getString("cannotSetValue"));
            }
        }
        
        
        
        @Override
        public boolean isCellEditable(int rowIdenx, int columnIndex) {     
            return false;
        }
        
        @Override
        public String getColumnName(int columnIndex) {
            if(columnIndex >= 7) throw new IllegalArgumentException(bundle.getString("columnIndex"));
                        
            switch(columnIndex) {
                case 0: return bundle.getString("Id");
                case 1: return bundle.getString("Vehicle");
                case 2: return bundle.getString("Customer");  
                case 3: return bundle.getString("StartDate");
                case 4: return bundle.getString("EndDate");
                case 5: return bundle.getString("RealEndDate");
                case 6: return bundle.getString("Info");
                default: throw new IllegalArgumentException(bundle.getString("columnIndex"));
            }
        }
    }
    
    private Reservation newReservation(Vehicle vehicle, 
                                       Customer customer, 
                                       Calendar startDate, 
                                       Calendar endDate, 
                                       Calendar realEndDate, 
                                       String info) {        
        Reservation reservation = new Reservation();
        reservation.setVehicle(vehicle);
        reservation.setCustomer(customer);
        reservation.setStartDate(startDate);
        reservation.setEndDate(endDate);
        reservation.setRealEndDate(realEndDate);
        reservation.setInfo(info);        
        return reservation;
    }
}
